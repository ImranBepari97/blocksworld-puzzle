
public class Node {
	
	/* A node class is used in the trees generated by the Algorithms class. It contains
	 * a board state, a value for the depth, and a Manhattan Distance used for the A* Heuristic.
	 */
	
	protected State state;
	protected int depth;
	protected static char[] ALPHABET = "abcdefghijklmnopqrstuvwxyz".toCharArray();
	
	//Intial constructor, just makes a new fresh puzzle
	public Node(int n) {
		state = new State(n);
		this.depth = 1;
	}
	
	

	/* New constructor for going down the tree. It takes the old State from before. It duplicates 
	* so that nothing breaks referencing up the tree. The depth can just incrememnt.
	*/
	public Node(State s, int depth) {
		state = s;
		this.depth = depth;
	}

	//getters setters
	public State getState() {
		return state;
	}

	public void setState(State state) {
		this.state = state;
	}

	public int getDepth() {
		return depth;
	}

	public void setDepth(int depth) {
		this.depth = depth;
	}
}
